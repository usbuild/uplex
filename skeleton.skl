#!/usr/bin/env python
# -*- coding:UTF-8 -*-

class DFAPack:
    def __init__(self, pack):
        self.graph, self.trans, self.oplist, self.start, self.end = pack

    def getNext(self, state, edge):
        trans = self.trans[state]
        try:
            idx = self.oplist.index(edge)
        except:
            return None
        for (x, y) in trans:
            if x == idx:
                return y
        return None
    def isEnd(self, s):
        return s in self.end


class DFAInstance:
    def __init__(self, pack, input_str):
        self.pack = pack
        self.state = pack.start
        self.input = input_str

    def validate(self):
        state = self.state
        i = 0
        for s in self.input:
            state = self.pack.getNext(state, s)
            if state is None:
                return self.input[0:i]
            i += 1
        if self.pack.isEnd(state):
            return self.input
        else:
            return ''


class REList:
    def __init__(self, pack):
        self.pack = [DFAPack(x) for x in pack]

    def validate(self, line):
        i = 0
        max_len = 0
        while i < len(self.pack):
            if i == 0:
                max_len = len(DFAInstance(self.pack[i], line).validate())
                if max_len == 0: return (0, None)
            else:
                if len(DFAInstance(self.pack[i], line).validate()) == max_len:
                    return (max_len, i - 1)
            i += 1

lex_pack = %{lex_packs}
#start content1
%{content1}
#end content1

#main loop
while True:
    if len(input) == 0:break
    data, reg_pos = REList(lex_pack).validate(input)
    if data == 0:
        raise SyntaxError
    else:
        yytext = input[:data]
        input = input[data:]
        if False:
            pass

%{switch}
#end main loop

#start content2
%{content2}
#end content2